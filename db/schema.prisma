// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  username       String   @unique
  firstName      String?
  lastName       String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")
  institution    String?
  language       String   @default("en-US")
  tos            Boolean?
  orcid          String?

  tokens   Token[]
  sessions Session[]

  contributions    Contributor[]
  forms            Forms[]
  notifications    Notification[] @relation("UserNotifications")
  contributorLabel Label[]

  widgets       Widget[]
  projectWidget ProjectWidget[]

  invitations Invitation[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

enum ContributorPrivileges {
  PROJECT_MANAGER
  CONTRIBUTOR
}

enum InvitationStatus {
  INVITED
  ACCEPTED
  DECLINED
}

model Contributor {
  createdAt           DateTime              @default(now())
  id                  Int                   @id @default(autoincrement())
  userId              Int
  projectId           Int
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  project             Project               @relation(fields: [projectId], references: [id])
  assignments         Assignment[]
  privilege           ContributorPrivileges @default(PROJECT_MANAGER)
  teams               Team[]
  tasks               Task[]
  deleted             Boolean               @default(false)
  assignmentStatusLog AssignmentStatusLog[]
  // allow them to have multiple contributor labels, I think like the task array?
  // add contributor label link here
  labels              Label[]
}

// Invites
model Invitation {
  createdAt        DateTime         @default(now())
  id               Int              @id @default(autoincrement())
  userId           Int
  projectId        Int
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project          Project          @relation(fields: [projectId], references: [id])
  invitationStatus InvitationStatus @default(INVITED)
  invitationCode   String
}

// Contribution type
model Label {
  id           Int           @id @default(autoincrement())
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  name         String
  description  String?
  taxonomy     String?
  projects     Project[]
  tasks        Task[]
  contributors Contributor[]
}

model Project {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  description   String?
  abstract      String?
  keywords      String?
  citation      String?
  publisher     String?
  identifier    String?
  tasks         Task[]
  elements      Element[]
  columns       Column[]
  contributors  Contributor[]
  teams         Team[]
  labels        Label[]
  projectWidget ProjectWidget[]
  notifications Notification[]

  invitations Invitation[]
}

enum TaskStatus {
  COMPLETED
  NOT_COMPLETED
}

model Task {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdBy       Contributor  @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById     Int
  deadline        DateTime?
  name            String
  description     String?
  columnId        Int
  columnTaskIndex Int
  column          Column       @relation(fields: [columnId], references: [id])
  projectId       Int
  project         Project      @relation(fields: [projectId], references: [id])
  elementId       Int?
  element         Element?     @relation(fields: [elementId], references: [id])
  assignees       Assignment[]
  formVersionId   Int?
  formVersion     FormVersion? @relation(fields: [formVersionId], references: [id], onDelete: Cascade)
  status          TaskStatus   @default(NOT_COMPLETED)
  tags            String?

  labels Label[]
}

enum AssignmentStatus {
  COMPLETED
  NOT_COMPLETED
}

enum CompletedAs {
  INDIVIDUAL
  TEAM
}

model AssignmentStatusLog {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  assignmentId Int
  assignment   Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  status       AssignmentStatus @default(NOT_COMPLETED)
  metadata     Json?
  completedBy  Int?
  completedAs  CompletedAs      @default(INDIVIDUAL)
  contributor  Contributor?     @relation(fields: [completedBy], references: [id], onDelete: SetNull)

  @@unique([assignmentId, createdAt])
}

model Assignment {
  id            Int                   @id @default(autoincrement())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  taskId        Int
  task          Task                  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  contributorId Int?
  contributor   Contributor?          @relation(fields: [contributorId], references: [id], onDelete: SetNull)
  teamId        Int?
  team          Team?                 @relation(fields: [teamId], references: [id], onDelete: SetNull)
  statusLogs    AssignmentStatusLog[]
}

model Team {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  contributors Contributor[]
  projectId    Int
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignments  Assignment[]
}

model Column {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @default("To Do") // Might not need this
  tasks       Task[]
  columnIndex Int
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Element {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id])
  name        String
  description String?
  task        Task[]
  parents     Element[] @relation("ElementToElement")
  children    Element[] @relation("ElementToElement")
}

model Forms {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    Int
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions  FormVersion[]
  archived  Boolean       @default(false)
}

model FormVersion {
  id        Int      @id @default(autoincrement())
  name      String
  formId    Int
  version   Int
  schema    Json
  uiSchema  Json?
  createdAt DateTime @default(now())
  Form      Forms    @relation(fields: [formId], references: [id], onDelete: Cascade)
  Task      Task[]

  @@index([formId, version], name: "formVersionIndex")
}

model Notification {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  recipients   User[]   @relation("UserNotifications")
  message      String
  read         Boolean  @default(false)
  announcement Boolean  @default(false)
  projectId    Int?     @map("project_id")
  project      Project? @relation(fields: [projectId], references: [id])
}

model Widget {
  id       Int     @id @default(autoincrement())
  userId   Int
  user     User    @relation(fields: [userId], references: [id])
  type     String // "LastProject", "Notifications", "OverdueTask", "UpcomingTask"
  show     Boolean @default(true)
  position Int

  @@unique([userId, type])
}

model ProjectWidget {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
  type      String
  show      Boolean @default(true)
  position  Int

  @@unique([userId, projectId, type])
}
