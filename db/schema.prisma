// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  username       String   @unique
  firstName      String?
  lastName       String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]

  contributions Contributor[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Contributor {
  id          Int          @id @default(autoincrement())
  userId      Int
  projectId   Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project      @relation(fields: [projectId], references: [id])
  assignments Assignment[]
}

model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?

  tasks    Task[]
  elements Element[]
  columns  Column[]

  contributors Contributor[]
}

model Task {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  name            String
  description     String?
  columnId        Int
  columnTaskIndex Int
  column          Column       @relation(fields: [columnId], references: [id])
  projectId       Int
  project         Project      @relation(fields: [projectId], references: [id])
  elementId       Int?
  element         Element?     @relation(fields: [elementId], references: [id])
  assignees       Assignment[]
}

enum AssignmentStatus {
  COMPLETED
  NOT_COMPLETED
}

model Assignment {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  taskId        Int
  contributorId Int
  task          Task             @relation(fields: [taskId], references: [id])
  contributor   Contributor      @relation(fields: [contributorId], references: [id])
  status        AssignmentStatus @default(NOT_COMPLETED)
}

model Column {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @default("To Do") // Might not need this
  tasks     Task[]
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Element {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id])
  name        String
  description String?
  Task        Task[]
  parents     Element[] @relation("ElementToElement")
  children    Element[] @relation("ElementToElement")
}
