// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  hashedPassword   String?
  role             String             @default("USER")
  tos              Boolean?
  tokens           Token[]
  sessions         Session[]
  // notifications and dashboards
  notifications    Notification[]     @relation("UserNotifications")
  widgets          Widget[]
  projectWidget    ProjectWidget[]
  // profile information
  orcid            String?
  institution      String?
  username         String             @unique
  firstName        String?
  lastName         String?
  email            String             @unique
  language         String             @default("en-US")
  // relational information
  projects         ProjectMember[]
  forms            Form[]
  roles            Role[]
  ProjectPrivilege ProjectPrivilege[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

// controls the privileges at the project level
enum MemberPrivileges {
  PROJECT_MANAGER
  CONTRIBUTOR
}

// enrolls people into projects and groups them into teams if necessary
// keep all information over here for transparency purposes
model ProjectMember {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  // null if only one person
  name               String
  projectId          Int
  project            Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  //can be one person or many
  users              User[]
  tasks              Task[]
  roles              Role[]
  deleted            Boolean   @default(false)
  taskLogAssignedTo  TaskLog[] @relation("assignedTo")
  taskLogCompletedBy TaskLog[] @relation("completedBy")
}

// when someone is deleted from a project
// delete their row from here
model ProjectPrivilege {
  createdAt DateTime         @default(now())
  id        Int              @id @default(autoincrement())
  userId    Int
  projectId Int
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project          @relation(fields: [projectId], references: [id])
  privilege MemberPrivileges @default(PROJECT_MANAGER)
}

// Invites
model Invitation {
  createdAt      DateTime         @default(now())
  id             Int              @id @default(autoincrement())
  projectId      Int
  project        Project          @relation(fields: [projectId], references: [id])
  invitationCode String
  roles          Role[]
  email          String
  privilege      MemberPrivileges @default(CONTRIBUTOR)
  addedBy        String
}

// these are used to label the "roles" within a project like credit
model Role {
  id             Int             @id @default(autoincrement())
  userId         Int
  user           User            @relation(fields: [userId], references: [id])
  name           String
  description    String?
  taxonomy       String?
  projects       Project[]
  tasks          Task[]
  projectMembers ProjectMember[]
  Invitation     Invitation?     @relation(fields: [invitationId], references: [id])
  invitationId   Int?
}

// the overall project structure
model Project {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  // project metadata
  name             String
  description      String?
  abstract         String?
  keywords         String?
  citation         String?
  publisher        String?
  identifier       String?
  // project relations
  tasks            Task[]
  elements         Element[]
  containers       KanbanBoard[]
  projectMembers   ProjectMember[]
  roles            Role[]
  projectWidget    ProjectWidget[]
  notifications    Notification[]
  ProjectPrivilege ProjectPrivilege[]
  Invitation       Invitation[]
}

// status naming
enum Status {
  COMPLETED
  NOT_COMPLETED
}

// give people things to do
model Task {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   ProjectMember @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  // task metadata
  deadline    DateTime?
  name        String
  description String?
  tags        String?

  // check the kanban board coding
  containerId Int
  container   KanbanBoard @relation(fields: [containerId], references: [id])

  // task relations
  projectId     Int
  project       Project      @relation(fields: [projectId], references: [id])
  elementId     Int?
  element       Element?     @relation(fields: [elementId], references: [id])
  formVersionId Int?
  formVersion   FormVersion? @relation(fields: [formVersionId], references: [id], onDelete: Cascade)
  status        Status       @default(NOT_COMPLETED)
  taskLogs      TaskLog[]
  roles         Role[]
}

// project kanban board view
model KanbanBoard {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String   @default("To Do") // Might not need this
  tasks          Task[]
  containerOrder Int
  projectId      Int
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum CompletedAs {
  INDIVIDUAL
  TEAM
}

model TaskLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) //tells us when things happened
  status    Status   @default(NOT_COMPLETED) //tells us if it done
  metadata  Json?

  // this helps with showing to the users so we don't have go back to projectMember table
  completedAs CompletedAs @default(INDIVIDUAL)

  // who or which team should be assigned the task
  assignedToId Int
  assignedTo   ProjectMember @relation("assignedTo", fields: [assignedToId], references: [id])

  // this is who does the task who might not be assigned like the project manager
  // this should be the id of the user (singular)
  completedById Int?
  completedBy   ProjectMember? @relation("completedBy", fields: [completedById], references: [id])

  // what is the task this is tied to
  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

// this is our storage buckets!
model Element {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id])
  name        String
  description String?
  task        Task[]
  parents     Element[] @relation("ElementToElement")
  children    Element[] @relation("ElementToElement")
}

// the forms that people created at the user level
model Form {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    Int
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions  FormVersion[]
  archived  Boolean       @default(false)
}

// this allows you to update forms but not bork up the tasks they are linked with
model FormVersion {
  id        Int      @id @default(autoincrement())
  name      String
  formId    Int
  version   Int
  schema    Json
  uiSchema  Json?
  createdAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@index([formId, version], name: "formVersionIndex")
}

// this is our notification system
model Notification {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  recipients   User[]   @relation("UserNotifications")
  message      String
  read         Boolean  @default(false)
  announcement Boolean  @default(false)
  projectId    Int?     @map("project_id")
  project      Project? @relation(fields: [projectId], references: [id])
}

// overall user dashboard widgets
model Widget {
  id       Int     @id @default(autoincrement())
  userId   Int
  user     User    @relation(fields: [userId], references: [id])
  type     String // "LastProject", "Notifications", "OverdueTask", "UpcomingTask"
  show     Boolean @default(true)
  position Int

  @@unique([userId, type])
}

// project level dashboard widgets
model ProjectWidget {
  id        Int                @id @default(autoincrement())
  userId    Int
  user      User               @relation(fields: [userId], references: [id])
  projectId Int
  project   Project            @relation(fields: [projectId], references: [id])
  type      String
  show      Boolean            @default(true)
  position  Int
  size      WidgetSize         @default(MEDIUM)
  privilege MemberPrivileges[] @default([CONTRIBUTOR, PROJECT_MANAGER])

  @@unique([userId, projectId, type])
}

enum WidgetSize {
  SMALL
  MEDIUM
  LARGE
}
